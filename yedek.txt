import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
import io
import shap
import matplotlib.pyplot as plt
import warnings
import time 
from typing import Tuple, Dict, Any, List

# --- UYGULAMA YAPILANDIRMASI ve SABİTLER ---

# Matplotlib backend ayarı
try:
    # SHAP için gerekli backend ayarı
    plt.switch_backend('Agg')
except ImportError:
    pass

# Uyarıları bastırma
warnings.filterwarnings('ignore', category=UserWarning)
warnings.filterwarnings('ignore', category=FutureWarning)
pd.options.mode.chained_assignment = None

# Modelin çalışması için gereken zorunlu sütunlar listesi
REQUIRED_COLUMNS = ['koi_score', 'koi_fpflag_nt', 'koi_fpflag_ss', 
                    'koi_fpflag_co', 'koi_period', 'koi_depth', 
                    'koi_prad', 'koi_steff']

# Streamlit Sayfa Ayarları
st.set_page_config(
    page_title="Kepler-AI | Ötegezegen Sınıflandırma",
    layout="wide", # Layout wide, ancak içerik sütunlarla ortalanacak
    initial_sidebar_state="auto"
)


# -----------------------------------------------------------
# 1. ML VARLIKLARINI CACHING EDEN FONKSİYON
# -----------------------------------------------------------

@st.cache_resource(show_spinner="👽 Yapay Zeka Varlıkları Yükleniyor...")
def load_ml_assets_cached():
    """Modeli, ölçekleyiciyi ve SHAP Explainer'ı güvenle yükler."""
    
    MODEL_PATH = 'models/kepler_ai_best_model.joblib'
    SCALER_PATH = 'models/kepler_ai_scaler.joblib'
    FEATURES_PATH = 'models/kepler_ai_feature_names.joblib'
    
    try:
        if not os.path.exists(MODEL_PATH) or not os.path.exists(SCALER_PATH):
             raise FileNotFoundError(f"Model dosyaları bulunamadı: {MODEL_PATH} veya {SCALER_PATH}")

        model = joblib.load(MODEL_PATH)
        scaler = joblib.load(SCALER_PATH)
        feature_names_list = joblib.load(FEATURES_PATH)
        # SHAP TreeExplainer sadece ağaç tabanlı modellerde kullanılır
        explainer = shap.TreeExplainer(model) 
        
        return model, scaler, feature_names_list, explainer
    except FileNotFoundError as e:
        st.error(f"Hata: Gerekli model dosyaları bulunamadı. Lütfen 'models/' klasörünün doğru kurulduğundan emin olun.")
        return None, None, None, None
    except Exception as e:
        st.error(f"Model yükleme sırasında beklenmeyen bir hata oluştu: {e}")
        return None, None, None, None

# -----------------------------------------------------------
# 2. MODEL SİSTEMİ SINIFI (Tahmin ve Yorumlama Boru Hattı)
# -----------------------------------------------------------

class ExoplanetClassifier:
    """Makine öğrenimi boru hattını yöneten ana sınıf."""
    
    def __init__(self):
        self.model, self.scaler, self.feature_names, self.explainer = load_ml_assets_cached()
        if self.model is None or self.scaler is None:
             raise RuntimeError("Model yüklenemedi. Devam edilemiyor.")

    @staticmethod
    def _validate_and_clean_data(df_raw: pd.DataFrame, required_columns: list) -> Tuple[pd.DataFrame, List[str]]:
        """GELİŞMİŞ VERİ KALİTESİ KONTROLÜ VE TEMİZLEME SİSTEMİ"""
        df = df_raw.copy()
        initial_count = len(df)
        issues = []
        
        # Temel temizlik ve mantık kontrolleri (eksik/yanlış değerler)
        df.replace([np.inf, -np.inf], np.nan, inplace=True)
        df_cleaned = df.dropna(subset=required_columns)
        dropped_nan_count = initial_count - len(df_cleaned)
        if dropped_nan_count > 0:
            issues.append(f"{dropped_nan_count} satırda temel özelliklerde eksik (NaN/Inf) değer olduğu için çıkarıldı.")
        
        df = df_cleaned.copy()
        
        # Astrofiziksel mantık kontrolleri
        
        dropped_period_count = len(df[df['koi_period'] <= 0])
        df = df[df['koi_period'] > 0]
        if dropped_period_count > 0:
             issues.append(f"{dropped_period_count} satırda yörünge periyodu sıfır veya negatif olduğu için çıkarıldı.")
        
        dropped_score_count = len(df[(df['koi_score'] < 0) | (df['koi_score'] > 1)])
        df = df[(df['koi_score'] >= 0) & (df['koi_score'] <= 1)]
        if dropped_score_count > 0:
            issues.append(f"{dropped_score_count} satırda skor [0, 1] aralığı dışında olduğu için çıkarıldı.")
            
        dropped_prad_count = len(df[df['koi_prad'] <= 0])
        df = df[df['koi_prad'] > 0]
        if dropped_prad_count > 0:
            issues.append(f"{dropped_prad_count} satırda gezegen yarıçapı sıfır veya negatif olduğu için çıkarıldı.")
            
        dropped_depth_count = len(df[df['koi_depth'] <= 0])
        df = df[df['koi_depth'] > 0]
        if dropped_depth_count > 0:
            issues.append(f"{dropped_depth_count} satırda geçiş derinliği sıfır veya negatif olduğu için çıkarıldı.")

        fp_cols = ['koi_fpflag_nt', 'koi_fpflag_ss', 'koi_fpflag_co']
        for col in fp_cols:
            invalid_flag_count = len(df[(df[col] != 0) & (df[col] != 1)])
            if invalid_flag_count > 0:
                 issues.append(f"{invalid_flag_count} satırda '{col}' bayrağı 0 veya 1 dışında olduğu için çıkarıldı.")
                 df = df[(df[col] == 0) | (df[col] == 1)]

        final_count = len(df)
        if final_count < initial_count:
            issues.insert(0, f"**Toplam {initial_count - final_count} satır KONTROL SİSTEMİ tarafından geçersiz veri nedeniyle atıldı.**")
            
        return df, issues
    
    @staticmethod
    def _feature_engineering_and_alignment(df_raw_row: pd.DataFrame, feature_names: list) -> pd.DataFrame:
        """Yüksek Hassasiyetli Öznitelik Mühendisliği ve Sütun Hizalama."""
        df_new = df_raw_row.copy()
        EPSILON = 1e-12 

        df_new['R_PRAD_log'] = np.log10(df_new['koi_prad'].replace(0, EPSILON))
        df_new['R_PERIOD_log'] = np.log10(df_new['koi_period'].replace(0, EPSILON))
        df_new['R_DEPTH_log'] = np.log10(df_new['koi_depth'].replace(0, EPSILON))
        
        df_new['koi_density_proxy'] = df_new['koi_prad'] / (df_new['koi_period'].replace(0, EPSILON) ** (1/3))
        df_new['koi_depth_teff_int'] = df_new['koi_depth'] * df_new['koi_steff']
        
        df_aligned = pd.DataFrame(0.0, index=df_new.index, columns=feature_names, dtype=np.float64)
        
        for col in df_new.columns:
            if col in df_aligned.columns:
                df_aligned.loc[:, col] = df_new.loc[:, col].astype(np.float64)
                
        return df_aligned
    
    def _get_confidence_robust(self, X_scaled: np.ndarray, num_runs: int = 10) -> Tuple[str, float]:
        """Monte Carlo Güven Tahmini (10 tekrar - Kararlı sonuç için gürültü eklenir)"""
        
        JITTER_SCALE = 0.001 
        
        all_probabilities = []
        
        for _ in range(num_runs):
            # Monte Carlo simülasyonu için ölçeklenmiş veriye hafif gürültü ekleme
            X_jittered = X_scaled + np.random.normal(0, JITTER_SCALE, X_scaled.shape)
            proba = self.model.predict_proba(X_jittered)[0]
            all_probabilities.append(proba)
            
        avg_probabilities = np.mean(all_probabilities, axis=0)
        
        prediction_label = "GEZEGEN/ADAY" if avg_probabilities[1] > 0.5 else "YANLIŞ POZİTİF (FALSE POSITIVE)"
        confidence = max(avg_probabilities)
        
        return prediction_label, confidence
    
    def predict(self, df_raw: pd.DataFrame, row_index: int) -> Tuple[str, float, io.BytesIO, Dict[str, Any]]:
        """Tüm tahmin boru hattını çalıştırır."""
        
        df_raw_row = df_raw.iloc[[row_index]]
            
        # 1. Hizalama ve Ölçekleme
        X_aligned = self._feature_engineering_and_alignment(df_raw_row, self.feature_names)
        X_scaled = self.scaler.transform(X_aligned.values)
        
        # 2. Tahmin
        prediction_label, confidence = self._get_confidence_robust(X_scaled, num_runs=10)
        
        # 3. SHAP Yorumlaması
        shap_values = self.explainer.shap_values(X_scaled) 
        
        # SHAP değerlerini uygun sınıfa göre seçme
        if isinstance(shap_values, list):
            target_class_index = 1 if len(shap_values) > 1 else 0
            values_to_plot = shap_values[target_class_index][0] 
            base_value_to_plot = self.explainer.expected_value[target_class_index]
        elif isinstance(shap_values, np.ndarray):
            if shap_values.ndim == 3:
                values_to_plot = shap_values[0, :, 1]
                base_value_to_plot = self.explainer.expected_value[1]
            elif shap_values.ndim == 2:
                values_to_plot = shap_values[0, :]
                base_value_to_plot = self.explainer.expected_value
            else:
                raise TypeError("SHAP çıktı boyutu tanınmadı.")

        if isinstance(base_value_to_plot, np.ndarray):
             base_value_to_plot = base_value_to_plot.flatten()[0]
        
        # --- KOYU TEMA İÇİN SHAP GÖRSELİNİ UYARLAMA ---
        # Görseli IO Buffer'a kaydetme
        fig, ax = plt.subplots(figsize=(10, 6), facecolor='#0E1117') 
        
        shap.waterfall_plot(shap.Explanation(
            values=values_to_plot, 
            base_values=base_value_to_plot, 
            data=X_scaled[0], 
            feature_names=self.feature_names), max_display=15, show=False)
        
        # Koyu tema uyumu için yazı renklerini beyaza ayarlama
        ax.tick_params(axis='x', colors='white')
        ax.tick_params(axis='y', colors='white')
        plt.title(f"KOI Adayı {row_index+1} için Model Karar Açıklaması", color='white')
        
        buf = io.BytesIO()
        plt.savefig(buf, format="png", bbox_inches="tight", facecolor='#0E1117')
        plt.close(fig)
        
        return prediction_label, confidence, buf, df_raw_row.iloc[0].to_dict()

# -----------------------------------------------------------
# 3. STREAMLIT ANA UYGULAMA MANTIĞI
# -----------------------------------------------------------

try:
    # Uygulama başlatıldığında modelin yüklenmesini denetle
    CLASSIFIER = ExoplanetClassifier()
except RuntimeError as e:
    # Model yüklenemezse uygulamayı durdur
    st.error(f"Uygulama başlatılamadı: {e}")
    st.stop()


# --- MERKEZİ ODAKLI BAŞLIK ALANI (EKRANIN YAKLAŞIK %43'Ü) ---
# [2 (Boşluk), 3 (İçerik), 2 (Boşluk)]
col_left_title, col_center_title, col_right_title = st.columns([2, 3, 2])

with col_center_title:
    st.title("🔭 Kepler-AI: Ötegezegen Sınıflandırma ve Yorumlama")
    st.markdown("Veri kalitesi kontrolünden geçirilen **maksimum hassasiyetli** verilerle yüksek güvenilirlikli tahminler üretilir.")

# 5 saniyelik yükleme animasyonu fonksiyonu
def run_simulation_animation(candidate_name, total_duration=5.0):
    """5 saniyelik, 5 aşamalı görsel bekleme barını Streamlit API'ye uygun çalıştırır."""
    
    # Animasyonu merkezileştir
    col_left_anim, col_center_anim, col_right_anim = st.columns([2, 3, 2])
    
    with col_center_anim:
        status_placeholder = st.empty()
        progress_bar = st.progress(0)
        
        status_placeholder.subheader(f"💫 Aday {candidate_name} için Yüksek Güvenilirlikli Analiz Başlatıldı...")

        # Aşamalar ve ilerleme yüzdeleri
        stages = [
            (0.1, "1/5: Veri Özellikleri Yüksek Hassasiyetle Hizalanıyor (Float64)"),
            (0.3, "2/5: Monte Carlo Simülasyonu Başlatılıyor (Rastgele Gürültü Ekleme)"),
            (0.6, "3/5: Yapay Zeka Modeli 10 Farklı Simülasyonu Eşzamanlı İşliyor..."),
            (0.9, "4/5: Olasılık Skorları Ortalama Güvenilirlik İçin Birleştiriliyor..."),
            (1.0, "5/5: SHAP Değerleri Hesaplandı ve Karar Açıklaması Oluşturuluyor.")
        ]
        
        current_progress = 0.0
        start_time = time.time()
        
        for target_progress, message in stages:
            progress_increment = (target_progress - current_progress)
            time_to_wait = total_duration * progress_increment 
            num_steps = 20
            step_delay = time_to_wait / num_steps if num_steps > 0 else 0
            step_increment = progress_increment / num_steps if num_steps > 0 else progress_increment
            
            for _ in range(num_steps):
                current_progress += step_increment
                progress_bar.progress(min(current_progress, target_progress))
                status_placeholder.markdown(f"**{message}**")
                time.sleep(step_delay)
                
            current_progress = target_progress
            progress_bar.progress(current_progress)

        remaining_time = total_duration - (time.time() - start_time)
        if remaining_time > 0:
            time.sleep(remaining_time)
        
        progress_bar.empty()
        status_placeholder.empty()
        st.success(f"✅ Analiz Tamamlandı! Aday {candidate_name} için sonuçlar hazır.")
        time.sleep(0.5)

# --- MERKEZİ YÜKLEME ALANI ---
prediction_container = st.container()
upload_placeholder = st.empty()
uploaded_file = None 

# 1. NO FILE UPLOADED: Show the central, focused upload area
with upload_placeholder.container():
    st.markdown("<br><br><br>", unsafe_allow_html=True)
    
    # Yükleyiciyi merkezileştir
    col_left, col_center, col_right = st.columns([2, 3, 2]) 
    
    with col_center:
        st.header("1. Kepler Veri Setini Yükle 🌠")
        st.markdown("### **<span style='color:#FF9900;'>Yapay Zeka ile Ötegezegen Adaylarını Bir Tıkla Temizle ve Analiz Et.</span>**", unsafe_allow_html=True)
        st.markdown("---")
        
        # Merkezi Dosya Yükleyici
        uploaded_file = st.file_uploader(
            "Lütfen filtrelenmiş Kepler/KOI CSV dosyasını buraya sürükle bırak veya Tıkla (.csv)", 
            type=['csv'],
            key="main_uploader"
        )
        st.markdown("<br><br><br>", unsafe_allow_html=True)

# Dosya yüklenmişse (uploaded_file is not None)
if uploaded_file is not None:
    # Merkezi yükleme ekranını temizle
    upload_placeholder.empty()

    try:
        # Veri okuma ve temizleme
        df_raw = pd.read_csv(uploaded_file, skiprows=14)
        missing_cols = [col for col in REQUIRED_COLUMNS if col not in df_raw.columns]
        
        if missing_cols:
            st.error(f"Hata: Yüklenen CSV dosyasında eksik zorunlu sütunlar var: **{', '.join(missing_cols)}**")
            st.stop() 

        df_cleaned, validation_issues = ExoplanetClassifier._validate_and_clean_data(df_raw, REQUIRED_COLUMNS)
        
        if df_cleaned.empty:
            st.error("Hata: Yüklenen dosyada tüm temizlik kontrollerini geçen geçerli aday kalmadı.")
            if validation_issues:
                st.warning("Tespit edilen ve çıkarılan veri sorunları:")
                for issue in validation_issues:
                    st.write(f"- {issue}")
            st.stop()
            
        df_raw = df_cleaned
        
        # 2. Sidebar'ı Analiz Kontrolleri ile doldur
        st.sidebar.header("2. Aday Seçimi ve Kontroller")
        st.sidebar.info("Yüksek güvenilirlikli tahminler için Monte Carlo simülasyonu kullanılacaktır.")
        
        st.sidebar.success(f"Veri Yüklendi. Kalan **{len(df_raw)}** sağlam aday analiz için hazır.")
        
        candidate_index = st.sidebar.selectbox(
            label="Analiz Edilecek Adayı Seçin (Satır Numarası)",
            options=list(range(len(df_raw))),
            format_func=lambda i: f"Aday {i+1} (Orijinal Satır No: {df_raw.index[i] + 1})"
        )
        
        # Gelişmiş veri temizlik raporu (Expander içinde)
        if validation_issues and len(validation_issues) > 1:
            st.sidebar.warning("Veri Kontrol Sisteminden Özet:")
            st.sidebar.markdown(validation_issues[0]) 
            with st.sidebar.expander("Detaylı Temizlik Raporunu Gör"):
                for issue in validation_issues[1:]:
                     st.write(f"- {issue}")

        
        if st.sidebar.button('🚀 Seçili Adayı Tahmin Et ve Yorumla', type="primary"):
            
            # Yükleme animasyonu çalıştırılır
            run_simulation_animation(candidate_index + 1)
            
            # Tahmin çalışır
            prediction, confidence, shap_buffer, raw_data = CLASSIFIER.predict(df_raw, candidate_index)
            
            with prediction_container:
                
                # --- SONUÇ ALANINI ORTALAMA ---
                col_left_res, col_center_res, col_right_res = st.columns([2, 3, 2])
                
                with col_center_res:
                    
                    # 3. Sonuç Başlığı
                    st.header(f"3. 🛰️ Aday {candidate_index+1} için Analiz Sonucu")
                    
                    is_false_positive = "YANLIŞ" in prediction
                    emoji = "🚨" if is_false_positive else "✅"
                    
                    st.markdown("---")
                    
                    # --- MODERN METRİK GRUPLAMA: TAHMİN ÖZETİ ---
                    st.markdown("## 🎯 Tahmin Özeti")
                    
                    # 1. Satır: Ana Sonuç ve Güven
                    col_pred, col_conf = st.columns([1, 1]) 
                    
                    with col_pred:
                        st.metric(label="Sınıflandırma Sonucu", 
                                  value=f"{prediction}", 
                                  delta=emoji)
                    
                    with col_conf:
                        st.metric(label="Model Güveni (10x Monte Carlo)", 
                                  value=f"{confidence:.2%}",
                                  delta="Yüksek Kararlılık")
                    
                    st.markdown("<br>", unsafe_allow_html=True) # Hafif dikey boşluk

                    # 2. Satır: Astrofiziksel Veriler
                    col_prad, col_period, col_flag = st.columns(3)
                    
                    with col_prad:
                        # DÜZELTME: SyntaxWarning'i gidermek için 'raw string' kaldırıldı.
                        st.metric("Gezegen Yarıçapı (Prad)", f"{raw_data.get('koi_prad', 0.0):.2f} $R_{{\oplus}}$")
                    with col_period:
                        st.metric("Yörünge Periyodu", f"{raw_data.get('koi_period', 0.0):.2f} Gün")
                    with col_flag:
                        st.metric("Merkez Kayması Bayrağı", f"{int(raw_data.get('koi_fpflag_co', 0))}")
                    
                    st.markdown("---")

                    # --- SHAP GÖRSELİ ---
                    st.header("🔬 Modelin Karar Analizi (SHAP)")
                    st.info("Aşağıdaki görsel, modelin kararını verirken hangi özelliklerin sonucu ne yönde etkilediğini gösteren güvenilir kanıttır.")
                    
                    # DÜZELTME: DeprecationWarning'i gidermek için use_container_width yerine width='stretch' kullanıldı.
                    st.image(shap_buffer, caption=f'Aday {candidate_index+1} için SHAP Görseli', width='stretch') 


    except RuntimeError as e:
        # Çalışma zamanı model/ölçekleyici hatası
        st.error(f"Uygulama Çalıştırma Hatası: {e}. Model varlıklarının doğru yüklendiğinden emin olun.")
    except Exception as e:
        # Genel beklemedik hata
        st.exception(e) 
        st.error(f"Genel Hata: Uygulama sırasında beklenmeyen bir sorun oluştu. Detay: {type(e).__name__}: {e}")